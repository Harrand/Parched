shader(type = vertex);

vec2 positions[3] = vec2[]
(
    vec2(0.0, 100.0),
    vec2(100.0, -100.0),
    vec2(-100.0, -100.0)
);

struct BallData
{
	vec2 position;
	vec3 colour;
	float scale;
	bool is_active;
};

resource(id = 0) const buffer BallBuffer
{
	BallData data[];
} balls;

resource(id = 1) const buffer Meta
{
	float aspect_ratio;
} metadata;

output(id = 0) vec3 colour;
output(id = 1) vec2 centre;
output(id = 2) float size;
output(id = 3) vec2 position_clipspace;

void main()
{
	uint ball_index = in::vertex_id / 3;
	uint ball_vertex_id = in::vertex_id % 3;

	vec2 triangle_pos = positions[ball_vertex_id];
	vec2 clipspace_pos = balls.data[ball_index].position + triangle_pos;
	clipspace_pos.x /= metadata.aspect_ratio;

	out::position = vec4(clipspace_pos * float(balls.data[ball_index].is_active), 0.0, 1.0);

	position_clipspace = out::position.xy;
	colour = balls.data[ball_index].colour;
	centre = balls.data[ball_index].position;
	centre.x /= metadata.aspect_ratio;
	size = balls.data[ball_index].scale;
}
