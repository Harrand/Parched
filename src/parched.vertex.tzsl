shader(type = vertex);

vec2 positions[3] = vec2[]
(
    vec2(0.0, 0.5),
    vec2(0.5, -0.5),
    vec2(-0.5, -0.5)
);

struct BallData
{
	vec2 position;
	vec3 colour;
	vec2 scale;
	bool is_active;
};

resource(id = 0) buffer BallBuffer
{
	BallData data[];
} balls;

output(id = 0) vec3 colour;

void main()
{
	uint ball_index = tz_VertexID / 3;
	uint ball_vertex_id = tz_VertexID % 3;

	vec2 triangle_pos = positions[ball_vertex_id];
	vec2 clipspace_pos = balls.data[ball_index].position + (triangle_pos * balls.data[ball_index].scale);
	if(!balls.data[ball_index].is_active)
	{
		gl_Position = vec4(0, 0, 0, 1);
	}
	else
	{
		gl_Position = vec4(clipspace_pos, 0.0, 1.0);
	}
	colour = balls.data[ball_index].colour;
}
